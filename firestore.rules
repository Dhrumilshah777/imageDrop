/**
 * @fileoverview Firestore Security Rules for ImageDrop.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and a mixed access model for images.
 * User profiles are private and only accessible to the authenticated user. Images are stored in two collections:
 * a user-specific subcollection for private management and a top-level collection for public browsing.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. The `userId` MUST match the authenticated user's UID.
 * - /users/{userId}/images/{imageId}: Stores images owned by a specific user.
 * - /images/{imageId}: Stores all images for public browsing. Contains a `userId` field for ownership.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Users can only manage (create, update, delete) images they own in their private subcollection.
 * - The top-level /images collection allows public read access but restricts writes to owners only, based
 *   on the `userId` field within the image document.
 * - Listing of user documents is disallowed.
 *
 * Denormalization for Authorization:
 * - The /images/{imageId} documents MUST contain a `userId` field that matches the owner's UID. This
 *   is essential for enforcing owner-only writes in the public collection.
 *
 * Structural Segregation:
 * - Images are stored in both a private subcollection (/users/{userId}/images/{imageId}) and a public
 *   top-level collection (/images/{imageId}). This allows for public read access without exposing
 *   private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == request.resource.data.id
     * @deny (get) if request.auth == null
     * @deny (update, delete) if request.auth == null
     * @deny (create) if request.auth == null
     * @deny (list) Listing users is not allowed
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages images uploaded by a specific user. Only the owning user can create, read, update, or delete their images.
     * @path /users/{userId}/images/{imageId}
     * @allow (get, list, create, update, delete) if request.auth.uid == userId
     * @deny (get, list, create, update, delete) if request.auth == null
     * @principle Restricts access to a user's own images.
     */
    match /users/{userId}/images/{imageId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Provides public read access to all images, but restricts writes to the owner of the image. The image document must contain a `userId` field matching the owner's UID.
     * @path /images/{imageId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.userId
     * @allow (update, delete) if request.auth.uid == resource.data.userId
     * @deny (create, update, delete) if request.auth == null
     * @principle Allows public browsing but enforces ownership for modifications.
     */
    match /images/{imageId} {
        function isSignedIn() {
            return request.auth != null;
        }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}