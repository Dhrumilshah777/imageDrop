/**
 * @fileoverview Firestore Security Rules for ImageDrop application.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model. User data is strictly controlled
 * by ownership. Images can be browsed publicly in a top-level collection,
 * but their creation, modification, and deletion are restricted to the owner.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the owning user.
 * - /users/{userId}/images/{imageId}: Stores images specific to a user, accessible only by that user.
 * - /images/{imageId}: Stores all images for public browsing, but write access is owner-only.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Listing of users is disallowed to prevent enumeration.
 * - The /images collection is publicly readable, but write access is restricted to the image's owner.
 * - Data validation is relaxed for rapid prototyping, focusing on ownership and relational integrity.
 *
 * Denormalization for Authorization:
 * The `Image` entity in the `images` collection denormalizes `userId`, `userName`, and `userPhotoURL` to allow simple owner checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {bool} - True if the UID matches, false otherwise.
     * @example isOwner("someUserId") will return true if request.auth.uid == "someUserId".
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {bool} - True if the UID matches and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for user profiles.
     * @path /users/{userId}
     * @allow (create) - Allows a user to create their own profile if the userId matches their auth UID.
     * @allow (get) - Allows a user to read their own profile.
     * @allow (update) - Allows a user to update their own profile.
     * @allow (delete) - Allows a user to delete their own profile.
     * @deny (create) - Denies a user from creating a profile with a userId that does not match their auth UID.
     * @deny (get) - Denies a user from reading another user's profile.
     * @deny (update) - Denies a user from updating another user's profile.
     * @deny (delete) - Denies a user from deleting another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for images specific to a user.
     * @path /users/{userId}/images/{imageId}
     * @allow (create) - Allows a user to create an image in their own images collection.
     * @allow (get) - Allows a user to read an image in their own images collection.
     * @allow (update) - Allows a user to update an image in their own images collection.
     * @allow (delete) - Allows a user to delete an image in their own images collection.
     * @deny (create) - Denies a user from creating an image in another user's images collection.
     * @deny (get) - Denies a user from reading an image in another user's images collection.
     * @deny (update) - Denies a user from updating an image in another user's images collection.
     * @deny (delete) - Denies a user from deleting an image in another user's images collection.
     * @principle Enforces user-ownership for images in the user-specific subcollection.
     */
    match /users/{userId}/images/{imageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the root-level images collection, allowing public reads with owner-only writes.
     * @path /images/{imageId}
     * @allow (get) - Allows anyone to read an image.
     * @allow (list) - Allows anyone to list images.
     * @allow (create) - Allows a user to create an image if the userId matches their auth UID.
     * @allow (update) - Allows a user to update an image if they are the owner.
     * @allow (delete) - Allows a user to delete an image if they are the owner.
     * @deny (create) - Denies a user from creating an image with a userId that does not match their auth UID.
     * @deny (update) - Denies a user from updating an image if they are not the owner.
     * @deny (delete) - Denies a user from deleting an image if they are not the owner.
     * @principle Allows public reads while enforcing user-ownership for writes.
     */
    match /images/{imageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}