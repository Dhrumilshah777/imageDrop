rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can read, update, or delete their profile.
     * @deny (create, get, update, delete) User with non-matching UID cannot create, read, update, or delete another user's profile.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces user ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Disallow listing all users

      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects images stored under a specific user's profile.
     * @path /users/{userId}/images/{imageId}
     * @allow (create, get, update, delete, list) User with matching UID can create, read, update, delete, or list their own images.
     * @deny (create, get, update, delete, list) User with non-matching UID cannot create, read, update, delete, or list another user's images.
     * @principle Enforces user ownership for images within their profile.
     */
    match /users/{userId}/images/{imageId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public reading of all images, but restricts modifications to the owner.
     * @path /images/{imageId}
     * @allow (get, list) Any signed-in user can read all images.
     * @allow (create) Only the user with matching UID can create an image, and the userId must match request.auth.uid.
     * @allow (update, delete) Only the user with matching UID can update or delete their own image.
     * @deny (create, update, delete) User with non-matching UID cannot create, update, or delete another user's image.
     * @principle Public read access with owner-only writes.
     */
    match /images/{imageId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
  }
}